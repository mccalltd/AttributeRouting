// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.261
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AttributeRouting.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Standard Usage")]
    public partial class StandardUsageFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "StandardUsage.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Standard Usage", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line 4
 testRunner.Given("I generate the routes defined in the subject controllers");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating routes for an action method")]
        [NUnit.Framework.TestCaseAttribute("GET", "Index", "Index", new string[0])]
        [NUnit.Framework.TestCaseAttribute("HEAD", "Index", "Index", new string[0])]
        [NUnit.Framework.TestCaseAttribute("POST", "Create", "Create", new string[0])]
        [NUnit.Framework.TestCaseAttribute("PUT", "Update", "Update/{id}", new string[0])]
        [NUnit.Framework.TestCaseAttribute("DELETE", "Destroy", "Destroy/{id}", new string[0])]
        [NUnit.Framework.TestCaseAttribute("GET", "Wildcards", "Wildcards/{*pathInfo}", new string[0])]
        [NUnit.Framework.TestCaseAttribute("", "AnyVerb", "AnyVerb", new string[0])]
        public virtual void GeneratingRoutesForAnActionMethod(string method, string action, string url, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating routes for an action method", exampleTags);
#line 6
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 7
 testRunner.When(string.Format("I fetch the routes for the StandardUsage controller\'s {0} action", action));
#line 8
 testRunner.Then(string.Format("the route is constrained to {0} requests", method));
#line 9
  testRunner.And(string.Format("the route url is \"{0}\"", url));
#line 10
  testRunner.And("the default for \"controller\" is \"StandardUsage\"");
#line 11
  testRunner.And(string.Format("the default for \"action\" is \"{0}\"", action));
#line 12
  testRunner.And("the namespace is \"AttributeRouting.Specs.Subjects\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating routes for an API controller")]
        [NUnit.Framework.TestCaseAttribute("GET", "Get", "api", new string[0])]
        [NUnit.Framework.TestCaseAttribute("HEAD", "Get", "api", new string[0])]
        [NUnit.Framework.TestCaseAttribute("POST", "Post", "api", new string[0])]
        [NUnit.Framework.TestCaseAttribute("PUT", "Put", "api/{id}", new string[0])]
        [NUnit.Framework.TestCaseAttribute("DELETE", "Delete", "api/{id}", new string[0])]
        [NUnit.Framework.TestCaseAttribute("GET", "Wildcards", "api/Wildcards/{*pathInfo}", new string[0])]
        [NUnit.Framework.TestCaseAttribute("", "AnyVerb", "api/AnyVerb", new string[0])]
        public virtual void GeneratingRoutesForAnAPIController(string method, string action, string url, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating routes for an API controller", exampleTags);
#line 24
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 25
 testRunner.When(string.Format("I fetch the routes for the HttpStandardUsage controller\'s {0} action", action));
#line 26
 testRunner.Then(string.Format("the route is constrained to {0} requests", method));
#line 27
  testRunner.And(string.Format("the route url is \"{0}\"", url));
#line 28
  testRunner.And("the default for \"controller\" is \"HttpStandardUsage\"");
#line 29
  testRunner.And(string.Format("the default for \"action\" is \"{0}\"", action));
#line 30
  testRunner.And("the namespace is \"AttributeRouting.Specs.Subjects.Http\"");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
