// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.261
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AttributeRouting.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Route Prefixes")]
    public partial class RoutePrefixesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "RoutePrefixes.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Route Prefixes", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line 4
 testRunner.Given("I generate the routes defined in the subject controllers");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating prefixed routes")]
        public virtual void GeneratingPrefixedRoutes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating prefixed routes", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 7
 testRunner.When("I fetch the routes for the RoutePrefixes controller\'s Index action");
#line 8
 testRunner.Then("the route url is \"Prefix/Index\"");
#line 9
 testRunner.When("I fetch the routes for the HttpRoutePrefixes controller\'s Get action");
#line 10
 testRunner.Then("the route url is \"ApiPrefix/Get\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating prefixed routes when route urls specify a duplicate prefix")]
        public virtual void GeneratingPrefixedRoutesWhenRouteUrlsSpecifyADuplicatePrefix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating prefixed routes when route urls specify a duplicate prefix", ((string[])(null)));
#line 12
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 13
 testRunner.When("I fetch the routes for the RoutePrefixes controller\'s DuplicatePrefix action");
#line 14
 testRunner.Then("the route url is \"Prefix/DuplicatePrefix\"");
#line 15
 testRunner.When("I fetch the routes for the HttpRoutePrefixes controller\'s DuplicatePrefix action");
#line 16
 testRunner.Then("the route url is \"ApiPrefix/DuplicatePrefix\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating absolute routes when a route prefix is defined")]
        public virtual void GeneratingAbsoluteRoutesWhenARoutePrefixIsDefined()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating absolute routes when a route prefix is defined", ((string[])(null)));
#line 18
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 19
 testRunner.When("I fetch the routes for the RoutePrefixes controller\'s Absolute action");
#line 20
 testRunner.Then("the route url is \"PrefixAbsolute\"");
#line 21
 testRunner.When("I fetch the routes for the HttpRoutePrefixes controller\'s Absolute action");
#line 22
 testRunner.Then("the route url is \"ApiPrefixAbsolute\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating prefixed routes when route url starts with the route prefix")]
        public virtual void GeneratingPrefixedRoutesWhenRouteUrlStartsWithTheRoutePrefix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating prefixed routes when route url starts with the route prefix", ((string[])(null)));
#line 24
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 25
 testRunner.When("I fetch the routes for the RoutePrefixes controller\'s RouteBeginsWithRoutePrefix " +
                    "action");
#line 26
 testRunner.Then("the route url is \"Prefix/Prefixer\"");
#line 27
 testRunner.When("I fetch the routes for the HttpRoutePrefixes controller\'s RouteBeginsWithRoutePre" +
                    "fix action");
#line 28
 testRunner.Then("the route url is \"ApiPrefix/ApiPrefixer\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating prefixed area routes")]
        public virtual void GeneratingPrefixedAreaRoutes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating prefixed area routes", ((string[])(null)));
#line 30
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 31
 testRunner.When("I fetch the routes for the AreaRoutePrefixes controller\'s Index action");
#line 32
 testRunner.Then("the route url is \"Area/Prefix/Index\"");
#line 33
 testRunner.When("I fetch the routes for the HttpAreaRoutePrefixes controller\'s Get action");
#line 34
 testRunner.Then("the route url is \"ApiArea/ApiPrefix/Get\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating prefixed area routes when route urls specify a duplicate prefix")]
        public virtual void GeneratingPrefixedAreaRoutesWhenRouteUrlsSpecifyADuplicatePrefix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating prefixed area routes when route urls specify a duplicate prefix", ((string[])(null)));
#line 36
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 37
 testRunner.When("I fetch the routes for the AreaRoutePrefixes controller\'s DuplicatePrefix action");
#line 38
 testRunner.Then("the route url is \"Area/Prefix/DuplicatePrefix\"");
#line 39
 testRunner.When("I fetch the routes for the HttpAreaRoutePrefixes controller\'s DuplicatePrefix act" +
                    "ion");
#line 40
 testRunner.Then("the route url is \"ApiArea/ApiPrefix/DuplicatePrefix\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating absolute routes when a route area and route prefix is defined")]
        public virtual void GeneratingAbsoluteRoutesWhenARouteAreaAndRoutePrefixIsDefined()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating absolute routes when a route area and route prefix is defined", ((string[])(null)));
#line 42
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 43
 testRunner.When("I fetch the routes for the AreaRoutePrefixes controller\'s Absolute action");
#line 44
 testRunner.Then("the route url is \"AreaPrefixAbsolute\"");
#line 45
 testRunner.When("I fetch the routes for the HttpAreaRoutePrefixes controller\'s Absolute action");
#line 46
 testRunner.Then("the route url is \"ApiAreaPrefixAbsolute\"");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
